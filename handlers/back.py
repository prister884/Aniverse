from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from rate_limit import rate_limit
from db import db
from keyboards.main_keyboard import get_main_keyboard

@rate_limit(1)
async def back_to(callback_query: types.CallbackQuery):
    """
    Handle the "back" button for various screens.
    The function dynamically checks the callback data and navigates to the appropriate screen.
    """
    # Acknowledge the callback to prevent the Telegram "waiting" state


    await callback_query.answer()


    user_id = callback_query.from_user.id
    user_data = db.users.find_one({"user_id": user_id})
    nickname = user_data.get("nickname", "–ì–æ—Å—Ç—å")
    username = user_data.get("username")
    spin_chances = user_data.get("spin_chances", 0)
    universe = user_data.get("universe", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞")
    seasonal_points = user_data.get("seasonal_points", 0)
    register_date = user_data.get("register_date")
    player_status = user_data.get("player_status")
    coins = user_data.get("coins")
    cards = user_data.get("cards", [[],[],[],[],[]])
    verse_data = db.universes.find_one({"name":universe})
    user_data = db.users.find_one({"user_id": user_id})

    maximum = verse_data.get("maximum", [])
    maximum_casual = maximum[1]
    maximum_rare = maximum[2]
    maximum_epic = maximum[3]
    maximum_legendary = maximum[4]
    maximum_mythic = maximum[5]
    
    casual_cards = len(cards[0])
    rare_cards = len(cards[1])
    epic_cards = len(cards[2])
    legendary_cards = len(cards[3])
    mythic_cards = len(cards[4])
    card_count = casual_cards+rare_cards+epic_cards+legendary_cards+mythic_cards

    # Extract the type of the back action from the callback data
    back_type = callback_query.data.split("_", 2)[2]  # Extract the part after "back_to_"

    if back_type == "welcome":
        # Handle back to welcome screen
        user_id = callback_query.from_user.id
        user_data = db.users.find_one({"user_id": user_id})
        banned_user = db.banned.find_one({"user_id":user_id})

        if not user_data:
            await callback_query.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
            return

        if not banned_user:

            await callback_query.message.edit_text(
                f"üëã [{nickname}](tg://user?id={user_id}), –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–æ –≤—Å–µ–ª–µ–Ω–Ω—É—é Aniverse card.\n\n"
                f"üÉè –¶–µ–ª—å –∏–≥—Ä—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫. –°–æ–±–∏—Ä–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –±–æ—Ä–∏—Å—å –∑–∞ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ \n\n"
                f"üåè –í—Å–µ–ª–µ–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∏ —É–ª—É—á—à–∞—Ç—å—Å—è",
                parse_mode="Markdown",
                reply_markup=get_main_keyboard(user_id),
                disable_web_page_preview=True  # Display main menu keyboard
            )
        
        else: 

            unban_request = InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton(text="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–∑–±–∞–Ω", url="https://t.me/aniverseclone_don"),
                InlineKeyboardButton(text="–†–∞–∑–±–∞–Ω –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞ 555 —Ä—É–±.", callback_data="alternative_payment")
            )

            # Greet the new user
            await callback_query.message.answer(
                f"üëã [–ì–æ—Å—Ç—å](tg://user?id={user_id}), –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–æ –≤—Å–µ–ª–µ–Ω–Ω—É—é Aniverse card.\n\n"
                f"üÉè –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –±–æ—Ç–∞!\n",
                reply_markup=unban_request,
                parse_mode="Markdown",
                disable_web_page_preview=True  # Disable link preview for greeting message
            )



    elif back_type == "aniverse":
        # Handle back to Aniverse screen (you can add logic specific to this screen)
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton(text="üîë –ö—É–ø–∏—Ç—å Aniverse pass", callback_data="payment_page_aniverse_pass")
        )
        keyboard.add(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        )

        await callback_query.message.edit_text(
            f"üîì –ß—Ç–æ –¥–∞—Å—Ç —Ç–µ–±–µ Aniverse pass? \n\n"
            f"‚õ∫Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª–∞–Ω \n"
            f"‚åõÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 4 \n"
            f"üèü –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∞—Ä–µ–Ω–µ –∫–∞–∂–¥—ã–π —á–∞—Å –≤–º–µ—Å—Ç–æ 2 \n"
            f"üïí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç –∏ –∞—Ä–µ–Ω—ã \n"
            f"üëæ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä–∞–∂–µ–Ω–∏—è —Å –±–æ—Å—Å–æ–º \n"
            f"üÉè –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö, —ç–ø–∏—á–µ—Å–∫–∏—Ö –∏ –º–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç \n"
            f"üë§ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ \n"
            f"ü•° –ü–æ–ª—É—á–∏—à—å +3 –∫—Ä—É—Ç–∫–∏ \n"
            f"üóìÔ∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 30 –¥–Ω–µ–π \n \n"
            f"üîë Aniverse pass - 159 —Ä—É–±–ª–µ–π ",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

    elif back_type == "menu":

        # Handle "–ú–µ–Ω—é"
        
        keyboard = InlineKeyboardMarkup(row_width=2)

        # First row
        keyboard.add(
            InlineKeyboardButton(text="üîë Pass", callback_data="pass"),
            InlineKeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="rating"),
        )

        # Second row
        keyboard.add(
            InlineKeyboardButton(text="üîÆ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
            InlineKeyboardButton(text="‚ôªÔ∏è –ö—Ä–∞—Ñ—Ç", callback_data="craft")
        )

        # Third row
        keyboard.add(
            InlineKeyboardButton(text="‚õ∫Ô∏è –ö–ª–∞–Ω—ã", callback_data="clans"),
            InlineKeyboardButton(text="üèü –ê—Ä–µ–Ω–∞", callback_data="arena")
        )

        # Fourth row
        keyboard.add(
            InlineKeyboardButton(text="üåô –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks"),
            InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="referral")
        )
        
        # Fifth row
        
        keyboard.add(
            InlineKeyboardButton(text="üó∫Ô∏è –°–º–µ–Ω–∏—Ç—å –≤—Å–µ–ª–µ–Ω–Ω—É—é", callback_data="change_universe")   
        )
        
        keyboard.add(
            InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å—ã –∑–∞ –ö—Ä—É—Ç–∫–∏", callback_data="spin_bonuses")
        )
        
        universe_cut = universe.split(" ", 1)[1] if universe != "–ù–µ –≤—ã–±—Ä–∞–Ω–∞" else universe
        
        cards_count = casual_cards+rare_cards+epic_cards+legendary_cards+mythic_cards


        await callback_query.message.edit_text(
            f"üë§ –ù–∏–∫: [{nickname}](https://t.me/{username}) \n"
            f"üó∫Ô∏è –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe_cut} \n"
            f"üÉè –í—Å–µ–≥–æ –∫–∞—Ä—Ç: {cards_count} –∏–∑ {maximum[0]}\n"
            f"üéñÔ∏è –°–µ–∑–æ–Ω–Ω—ã–µ –æ—á–∫–∏: {seasonal_points} _pts_ \n"
            f"üí∞ –ö–æ–∏–Ω—ã: {coins} ü™ô", 
            parse_mode="Markdown",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )

    elif back_type == "paymentaniverse":
        
        # Acknowledge the callback
        await callback_query.answer()
        
        keys = InlineKeyboardMarkup(row_width=2)

        keys.add(
                InlineKeyboardButton(text="üõí –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="alternative_payment_aniverse_aniverse_pass"),
                InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", url="t.me/aniverseclone_don")
        )
        
        keys.add(
                InlineKeyboardButton(text="‚úèÔ∏è –î—Ä—É–≥–∏–µ –°–ø–æ—Å–æ–±—ã", callback_data="alternative_payment_aniverse_aniverse_pass")  
        )
        
        keys.add(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_aniverse")
        )
    
        await callback_query.message.edit_text(
            f"üßæ –ü–æ–∫—É–ø–∫–∞ Aniverse pass\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 159 —Ä—É–±–ª–µ–π \n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"‚ÄºÔ∏è `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"—è –æ–ø–ª–∞—Ç–∏–ª\"`.\n\n"
            f"üí¨ `–í–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –¥–æ–Ω–∞—Ç–æ–º? –ü–∏—à–∏ —Å—é–¥–∞ - @donshirley` \n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ](https://telegra.ph/Polzovatelskoe-soglashenie-06-01-5)",
            parse_mode="Markdown",
            reply_markup=keys,
            disable_web_page_preview=True
        )


    else:
        # Handle other back actions here, if any
        await callback_query.message.edit_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.",
            parse_mode="Markdown"
        )
    
    # Acknowledge the callback to ensure the transition is visible to the user
    await callback_query.answer()
